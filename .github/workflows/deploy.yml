name: deploy-all

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy-all-${{ github.ref }}
  cancel-in-progress: true

env:
  REGION: us-central1
  GCP_PROJECT_ID: mira-470320
  FIREBASE_PROJECT_ID: mira-d303d
  ARTIFACT_REGISTRY_REPO: airavat
  SERVICE_NAME: airavat-backend
  WIF_PROVIDER:  projects/10892877764/locations/global/workloadIdentityPools/github/providers/github-provider
  BACKEND_SERVICE_ACCOUNT: github-actions-deployer@mira-470320.iam.gserviceaccount.com
  FRONTEND_SERVICE_ACCOUNT: firebase-deployer@mira-d303d.iam.gserviceaccount.com
  USE_HOSTING_REWRITE: "false"

jobs:
  backend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      backend_url: ${{ steps.geturl.outputs.backend_url }}
      smpl_health_url: ${{ steps.geturl.outputs.smpl_health_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print commit info
        run: |
          echo "Commit SHA: ${{ github.sha }}"
          echo "Ref: ${{ github.ref }}"

      - name: Auth with Workload Identity Federation (GCP)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.BACKEND_SERVICE_ACCOUNT }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker auth for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          docker build -t "$IMAGE" -f ai_fastapi_agent/Dockerfile ai_fastapi_agent

      - name: Push Docker image
        run: docker push "$IMAGE"

      - name: Compute allowed origins for CORS
        run: |
          # Temporarily allow all origins to validate CORS wiring in Cloud Run
          echo "ALLOWED_ORIGINS=*" >> $GITHUB_ENV
          echo "Allowed origins: $ALLOWED_ORIGINS"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --image="$IMAGE" \
            --ingress=all \
            --cpu=1 \
            --memory=512Mi \
            --concurrency=80 \
            --min-instances=0 \
            --max-instances=2 \
            --timeout=120 \
            --set-env-vars=^~^GEMINI_DISABLED=true~ALLOWED_ORIGINS=$ALLOWED_ORIGINS~SMPL_ASSETS_BASE_URL=https://storage.googleapis.com/mira-smpl-assets/models

      - name: Route 100% traffic to latest revision
        run: |
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --to-latest

      - name: Ensure public invoker policy
        run: |
          gcloud beta run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --member=allUsers \
            --role=roles/run.invoker || echo "Skipping allUsers binding due to org policy"
          gcloud run services get-iam-policy ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format=json | jq '.' | sed -n '1,120p'

      - name: Get service URL
        id: geturl
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "backend_url=$URL" >> $GITHUB_OUTPUT
          echo "BACKEND_URL=$URL" >> $GITHUB_ENV
          echo "smpl_health_url=$URL/smpl/health" >> $GITHUB_OUTPUT

      - name: Print backend URL
        run: |
          echo "Backend URL: $BACKEND_URL"

      - name: Print SMPL health URL
        run: |
          echo "SMPL health URL: ${{ steps.geturl.outputs.smpl_health_url }}"

      - name: Show Cloud Run service ingress and env
        run: |
          gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(spec.ingress)'
          gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='table(spec.template.spec.containers[0].env)'

      - name: Configure SMPL assets for public access
        run: |
          echo "Configuring SMPL assets bucket for public access..."
          
          # Create bucket if it doesn't exist
          gsutil mb gs://mira-smpl-assets || echo "Bucket already exists or failed to create"
          
          # Create CORS configuration for the bucket
          cat > cors.json << 'EOF'
          [
            {
              "origin": ["*"],
              "method": ["GET", "HEAD", "OPTIONS"],
              "responseHeader": ["Content-Type", "Access-Control-Allow-Origin"],
              "maxAgeSeconds": 3600
            }
          ]
          EOF
          
          # Apply CORS configuration
          gsutil cors set cors.json gs://mira-smpl-assets || echo "Failed to set CORS"
          
          # Create placeholder GLB files if they don't exist
          mkdir -p models
          for model in male female neutral; do
            if ! gsutil ls gs://mira-smpl-assets/models/${model}.glb > /dev/null 2>&1; then
              echo "Creating placeholder ${model}.glb"
              # Create a minimal GLB file (this is just a placeholder)
              echo "GLB placeholder for ${model}" > models/${model}.glb
              gsutil cp models/${model}.glb gs://mira-smpl-assets/models/${model}.glb || echo "Failed to upload ${model}.glb"
            fi
          done
          
          # Try to make bucket objects publicly readable (may fail due to org policy)
          gsutil iam ch allUsers:objectViewer gs://mira-smpl-assets || echo "Failed to make bucket public - org policy restriction"
          
          # Alternative: make individual GLB files public
          for model in male female neutral; do
            gsutil acl ch -u AllUsers:R gs://mira-smpl-assets/models/${model}.glb || echo "Failed to make ${model}.glb public"
          done
          
          echo "SMPL assets configuration complete"

      - name: Wait for revision to become ready
        run: sleep 20

      - name: Test CORS from runner
        run: |
          echo "Testing CORS preflight to $BACKEND_URL"
          curl -s -i -X OPTIONS "$BACKEND_URL/health" \
            -H 'Origin: https://${{ env.FIREBASE_PROJECT_ID }}.web.app' \
            -H 'Access-Control-Request-Method: GET' \
            -H 'Access-Control-Request-Headers: content-type' | sed -n '1,40p'
          echo "Testing simple GET without Origin"
          curl -s -i "$BACKEND_URL/health" | sed -n '1,20p'
          echo "Testing CORS GET with Origin header"
          curl -s -i "$BACKEND_URL/health" -H 'Origin: https://${{ env.FIREBASE_PROJECT_ID }}.web.app' | sed -n '1,20p'
          echo "Testing CORS preflight to /smpl/health"
          curl -s -i -X OPTIONS "$BACKEND_URL/smpl/health" \
            -H 'Origin: https://${{ env.FIREBASE_PROJECT_ID }}.web.app' \
            -H 'Access-Control-Request-Method: GET' \
            -H 'Access-Control-Request-Headers: content-type' | sed -n '1,40p'
          echo "Testing SMPL health GET"
          curl -s -i "$BACKEND_URL/smpl/health" | sed -n '1,20p'

  frontend:
    runs-on: ubuntu-latest
    needs: backend
    permissions:
      id-token: write
      contents: read
    env:
      BACKEND_URL: ${{ needs.backend.outputs.backend_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Auth with Workload Identity Federation (Firebase project)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.FRONTEND_SERVICE_ACCOUNT }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Print deployment info
        run: |
          echo "Deploying frontend with BACKEND_URL=$BACKEND_URL"

      - name: Inject backend URL into Flutter config
        run: |
          if [ "$USE_HOSTING_REWRITE" = "true" ]; then
            TARGET_URL="/api"
            echo "Using Firebase Hosting rewrite: $TARGET_URL"
          else
            TARGET_URL="$BACKEND_URL"
            echo "Using direct Cloud Run URL: $TARGET_URL"
          fi
          
          if [ -z "$TARGET_URL" ]; then
            echo "ERROR: TARGET_URL is empty!"
            exit 1
          fi
          
          # Update Flutter config
          echo "Updating backend_config.dart..."
          sed -i "s|static const String baseUrl = '[^']*';|static const String baseUrl = '$TARGET_URL';|g" airavat_flutter/lib/config/backend_config.dart
          
          # Update web viewer
          echo "Updating viewer/index.html..."
          sed -i "s|const SMPL_API_BASE = '[^']*';|const SMPL_API_BASE = '$TARGET_URL';|g" airavat_flutter/web/viewer/index.html
          
          # Show what we updated
          echo "Updated backend_config.dart:"
          grep "baseUrl" airavat_flutter/lib/config/backend_config.dart || echo "No baseUrl found"
          echo "Updated viewer/index.html:"
          grep "SMPL_API_BASE" airavat_flutter/web/viewer/index.html || echo "No SMPL_API_BASE found"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.10.5'

      - name: Setup Chrome for web tests
        id: chrome
        uses: browser-actions/setup-chrome@v1

      - name: Run Flutter tests
        working-directory: airavat_flutter
        env:
          CHROME_EXECUTABLE: ${{ steps.chrome.outputs.chrome-path }}
        continue-on-error: true
        run: |
          flutter config --enable-web
          flutter pub get
          # Run tests but do not fail the job; save full output to a log file
          flutter test -r expanded -d chrome | tee flutter-test-output.txt || true

      - name: Upload Flutter test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-test-report
          path: airavat_flutter/flutter-test-output.txt

      - name: Build Flutter web
        working-directory: airavat_flutter
        run: |
          flutter pub get
          flutter clean
          flutter pub get
          flutter build web --release --pwa-strategy=none --verbose

      - name: Install Firebase CLI
        run: npm i -g firebase-tools

      - name: Enable Cloud Run API in Firebase project (optional)
        run: gcloud services enable run.googleapis.com --project $FIREBASE_PROJECT_ID || echo "Skipping enable; lacking permission"

      - name: Disable Cloud Run rewrite if API not enabled or rewrites disabled
        run: |
          if [ "$USE_HOSTING_REWRITE" != "true" ]; then
            echo "Removing Cloud Run rewrites from firebase.json"
            jq '(.hosting.rewrites) |= map(select(.run|not))' firebase.json > firebase.tmp.json && mv firebase.tmp.json firebase.json
          fi

      - name: Deploy to Firebase Hosting (ADC)
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        run: firebase deploy --only hosting --project $FIREBASE_PROJECT_ID --non-interactive